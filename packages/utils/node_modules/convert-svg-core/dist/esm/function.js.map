{"version":3,"file":"function.js","sourceRoot":"","sources":["../../src/function.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;AAEH,OAAO,EACL,SAAS,GAMV,MAAM,gBAAgB,CAAC;AAwIxB;;;;;GAKG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAI7B,QAAyD,EACD,EAAE,CAAC,CAAC;IAC5D,KAAK,CAAC,OAAO,CACX,KAAsB,EACtB,UAGI,EAA+D;QAEnE,MAAM,SAAS,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;QAEnE,IAAI,CAAC;YACH,OAAO,MAAM,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACjD,CAAC;gBAAS,CAAC;YACT,MAAM,SAAS,CAAC,KAAK,EAAE,CAAC;QAC1B,CAAC;IACH,CAAC;IACD,KAAK,CAAC,WAAW,CACf,aAAqB,EACrB,UAGI,EAAmE;QAEvE,MAAM,SAAS,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;QAEnE,IAAI,CAAC;YACH,OAAO,MAAM,SAAS,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAC7D,CAAC;gBAAS,CAAC;YACT,MAAM,SAAS,CAAC,KAAK,EAAE,CAAC;QAC1B,CAAC;IACH,CAAC;IACD,eAAe,CACb,OAA0E;QAE1E,OAAO,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;IACpD,CAAC;CACF,CAAC,CAAC","sourcesContent":["/*\n * Copyright (C) 2025 neocotic\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {\n  Converter,\n  type IConverter,\n  type IConverterConvertFileOptions,\n  type IConverterConvertOptions,\n  type IConverterConvertOptionsParsed,\n  type IConverterOptions,\n} from \"./converter.js\";\nimport type { IProvider } from \"./provider.js\";\n\n/**\n * The options that can be passed to {@link IFuncDefinitions#convert}.\n */\nexport type IConvertFuncOptions<\n  ConvertOptions extends IConverterConvertOptions,\n  ConvertOptionsParsed extends IConverterConvertOptionsParsed,\n> = ICreateConverterFuncOptions<ConvertOptions, ConvertOptionsParsed> &\n  ConvertOptions;\n\n/**\n * The options that can be passed to {@link IFuncDefinitions#convertFile}.\n */\nexport type IConvertFileFuncOptions<\n  ConvertOptions extends IConverterConvertOptions,\n  ConvertOptionsParsed extends IConverterConvertOptionsParsed,\n> = ICreateConverterFuncOptions<ConvertOptions, ConvertOptionsParsed> &\n  IConverterConvertFileOptions<ConvertOptions>;\n\n/**\n * The options that can be passed to {@link IFuncDefinitions#createConverter}.\n */\nexport type ICreateConverterFuncOptions<\n  ConvertOptions extends IConverterConvertOptions,\n  ConvertOptionsParsed extends IConverterConvertOptionsParsed,\n> = Omit<IConverterOptions<ConvertOptions, ConvertOptionsParsed>, \"provider\">;\n\n/**\n * Contains the core functions to be exported by each format-specific non-CLI package, restricted to an individual\n * {@link IProvider}.\n */\nexport interface IFuncDefinitions<\n  ConvertOptions extends IConverterConvertOptions,\n  ConvertOptionsParsed extends IConverterConvertOptionsParsed,\n> {\n  /**\n   * Converts the specified `input` SVG into another format using the `options` provided via a headless Chromium\n   * instance.\n   *\n   * `input` can either be an SVG buffer or string.\n   *\n   * If the width and/or height cannot be derived from `input`, then they must be provided via their corresponding\n   * options. This method attempts to derive the dimensions from `input` via any `width`/`height` attributes or its\n   * calculated `viewBox` attribute.\n   *\n   * Only standard SVG element attributes (excl. event attributes) are allowed, and others are stripped from the SVG\n   * before being converted. This includes deprecated attributes unless the `allowDeprecatedAttributes` option is\n   * disabled. This is primarily for security purposes to ensure that malicious code cannot be injected.\n   *\n   * This method is resolved with the converted output buffer.\n   *\n   * An error will occur if both the `baseFile` and `baseUrl` options have been provided, `input` does not contain an\n   * SVG element or no `width` and/or `height` options were provided, and this information could not be derived from\n   * `input`.\n   *\n   * An {@link IConverter} is created and closed to perform this operation using {@link #createConverter}. If multiple\n   * files are being converted it is recommended to use {@link #createConverter} to create an {@link IConverter} and\n   * call {@link IConverter#convert} multiple times instead.\n   *\n   * @param input The SVG input to be converted to another format.\n   * @param options The options to be used.\n   * @return The converted output buffer.\n   */\n  convert(\n    input: Buffer | string,\n    options: IConvertFuncOptions<ConvertOptions, ConvertOptionsParsed>,\n  ): Promise<Buffer>;\n\n  /**\n   * Converts the SVG file at the specified path into another format using the `options` provided and writes it to the\n   * output file.\n   *\n   * The output file is derived from `inputFilePath` unless the `outputFilePath` option is specified.\n   *\n   * If the width and/or height cannot be derived from the input file, then they must be provided via their\n   * corresponding options. This method attempts to derive the dimensions from the input file via any `width`/`height`\n   * attributes or its calculated `viewBox` attribute.\n   *\n   * Only standard SVG element attributes (excl. event attributes) are allowed, and others are stripped from the SVG\n   * before being converted. This includes deprecated attributes unless the `allowDeprecatedAttributes` option is\n   * disabled. This is primarily for security purposes to ensure that malicious code cannot be injected.\n   *\n   * This method is resolved with the path of the converted output file for reference.\n   *\n   * An error will occur if both the `baseFile` and `baseUrl` options have been provided, the input file does not\n   * contain an SVG element, no `width` and/or `height` options were provided, and this information could not be derived\n   * from an input file, or a problem arises while reading the input file or writing the output file.\n   *\n   * An {@link IConverter} is created and closed to perform this operation using a {@link #createConverter}. If multiple\n   * files are being converted it is recommended to use {@link #createConverter} to create an {@link IConverter} and\n   * call {@link IConverter#convertFile} multiple times instead.\n   *\n   * @param inputFilePath The path of the SVG file to be converted to another file format.\n   * @param options The options to be used.\n   * @return The output file path.\n   */\n  convertFile(\n    inputFilePath: string,\n    options: IConvertFileFuncOptions<ConvertOptions, ConvertOptionsParsed>,\n  ): Promise<string>;\n\n  /**\n   * Creates an instance of {@link IConverter} using the `options` provided.\n   *\n   * When an {@link IConverter} is created it must either be passed an existing\n   * {@link import('puppeteer-core').Browser Browser} instance via {@link ICreateConverterFuncOptions#browser} or\n   * {@link import('puppeteer-core').LaunchOptions LaunchOptions} via {@link ICreateConverterFuncOptions#launch}\n   * so that a browser instance can be created or connected; otherwise it will fail to be created.\n   *\n   * If an existing {@link import('puppeteer-core').Browser Browser} instance is being used you may want to also\n   * consider what happens if/when the {@link IConverter} is closed (e.g. via {@link IConverter#close}) as the default\n   * behavior is to close the browser and all open pages, even those not opened by the {@link IConverter}. It can\n   * instead be instructed to either disconnect from the browser process or do nothing at all via\n   * {@link ICreateConverterFuncOptions#closeBehavior}.\n   *\n   * Due to constraints within Chromium, the SVG input is first written to a temporary HTML file and then navigated to.\n   * This is because the default page for Chromium is using the `chrome` protocol so cannot load externally referenced\n   * files (e.g. that use the `file` protocol). Each invocation of {@link IConverter#convert} or\n   * {@link IConverter#convertFile} open their own {@link import('puppeteer-core').Page Page} and create their own\n   * temporary files to avoid conflicts with other asynchronous invocations, which is closed and deleted respectively\n   * once finished. This allows the returned {@link IConverter} to safely process these calls concurrently.\n   *\n   * An {@link IConverter} uses its own {@link import('puppeteer-core').BrowserContext BrowserContext} to open each new\n   * {@link import('puppeteer-core').Page Page}. This ensures that the pages are isolated and that they can be closed by\n   * the {@link IConverter} accordingly.\n   *\n   * @param options The options to be used.\n   * @return A newly created {@link IConverter} instance.\n   */\n  createConverter(\n    options: ICreateConverterFuncOptions<ConvertOptions, ConvertOptionsParsed>,\n  ): Promise<IConverter<ConvertOptions, ConvertOptionsParsed>>;\n}\n\n/**\n * Returns the core functions to be exported by each format-specific non-CLI package for the specified `provider`.\n *\n * @param provider The {@link IProvider} to be used by the returned functions.\n * @return The core functions.\n */\nexport const defineFunctions = <\n  ConvertOptions extends IConverterConvertOptions,\n  ConvertOptionsParsed extends IConverterConvertOptionsParsed,\n>(\n  provider: IProvider<ConvertOptions, ConvertOptionsParsed>,\n): IFuncDefinitions<ConvertOptions, ConvertOptionsParsed> => ({\n  async convert(\n    input: Buffer | string,\n    options: IConvertFuncOptions<\n      ConvertOptions,\n      ConvertOptionsParsed\n    > = {} as IConvertFuncOptions<ConvertOptions, ConvertOptionsParsed>,\n  ): Promise<Buffer> {\n    const converter = await Converter.create({ ...options, provider });\n\n    try {\n      return await converter.convert(input, options);\n    } finally {\n      await converter.close();\n    }\n  },\n  async convertFile(\n    inputFilePath: string,\n    options: IConvertFileFuncOptions<\n      ConvertOptions,\n      ConvertOptionsParsed\n    > = {} as IConvertFileFuncOptions<ConvertOptions, ConvertOptionsParsed>,\n  ): Promise<string> {\n    const converter = await Converter.create({ ...options, provider });\n\n    try {\n      return await converter.convertFile(inputFilePath, options);\n    } finally {\n      await converter.close();\n    }\n  },\n  createConverter(\n    options: ICreateConverterFuncOptions<ConvertOptions, ConvertOptionsParsed>,\n  ): Promise<IConverter<ConvertOptions, ConvertOptionsParsed>> {\n    return Converter.create({ ...options, provider });\n  },\n});\n"]}