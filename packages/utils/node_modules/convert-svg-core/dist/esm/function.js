/*
 * Copyright (C) 2025 neocotic
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { Converter, } from "./converter.js";
/**
 * Returns the core functions to be exported by each format-specific non-CLI package for the specified `provider`.
 *
 * @param provider The {@link IProvider} to be used by the returned functions.
 * @return The core functions.
 */
export const defineFunctions = (provider) => ({
    async convert(input, options = {}) {
        const converter = await Converter.create({ ...options, provider });
        try {
            return await converter.convert(input, options);
        }
        finally {
            await converter.close();
        }
    },
    async convertFile(inputFilePath, options = {}) {
        const converter = await Converter.create({ ...options, provider });
        try {
            return await converter.convertFile(inputFilePath, options);
        }
        finally {
            await converter.close();
        }
    },
    createConverter(options) {
        return Converter.create({ ...options, provider });
    },
});
//# sourceMappingURL=function.js.map