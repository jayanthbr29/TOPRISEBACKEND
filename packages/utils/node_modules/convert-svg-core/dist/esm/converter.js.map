{"version":3,"file":"converter.js","sourceRoot":"","sources":["../../src/converter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2025 neocotic\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { readFile, writeFile } from \"node:fs/promises\";\nimport { basename, dirname, extname, join, resolve } from \"node:path\";\nimport { type Cheerio, load as loadHtml } from \"cheerio\";\nimport type { Element } from \"domhandler\";\nimport fileUrl from \"file-url\";\nimport {\n  type Browser,\n  type BrowserContext,\n  type LaunchOptions,\n  type Page,\n  type WaitForOptions,\n  launch as launchBrowser,\n} from \"puppeteer-core\";\nimport { file as tmpFile } from \"tmp\";\nimport type { IProvider } from \"./provider.js\";\n\n/**\n * Converts SVG to another format using a headless Chromium instance.\n *\n * When an {@link IConverter} is created it must either be passed an existing {@link Browser} instance via\n * {@link IConverterOptions#browser} or {@link IConverterLaunchOptions} via {@link IConverterOptions#launch} so that a\n * browser instance can be created or connected; otherwise it will fail to be created.\n *\n * If an existing {@link Browser} instance is being used you may want to also consider what happens if/when the\n * {@link IConverter} is closed (e.g. via {@link #close}) as the default behavior is to close the browser and all open\n * pages, even those not opened by the {@link IConverter}. It can instead be instructed to either disconnect from the\n * browser process or do nothing at all via {@link IConverterOptions#closeBehavior}.\n *\n * Due to constraints within Chromium, the SVG input is first written to a temporary HTML file and then navigated to.\n * This is because the default page for Chromium is using the `chrome` protocol so cannot load externally referenced\n * files (e.g. that use the `file` protocol). Each invocation of {@link #convert} or {@link #convertFile} open their own\n * {@link Page} and create their own temporary files to avoid conflicts with other asynchronous invocations, which is\n * closed and deleted respectively once finished. This allows a single {@link IConverter} to safely process these calls\n * concurrently.\n *\n * An {@link IConverter} uses its own {@link BrowserContext} to open each new {@link Page}. This ensures that the pages\n * are isolated and that they can be closed by the {@link IConverter} accordingly.\n *\n * It's also the responsibility of the caller to ensure that all {@link IConverter} instances are closed before the\n * process exits.\n */\nexport interface IConverter<\n  ConvertOptions extends IConverterConvertOptions,\n  ConvertOptionsParsed extends IConverterConvertOptionsParsed,\n> {\n  /**\n   * Whether this {@link IConverter} has been closed.\n   */\n  readonly closed: boolean;\n  /**\n   * The {@link IProvider} for this {@link IConverter}.\n   */\n  readonly provider: IProvider<ConvertOptions, ConvertOptionsParsed>;\n\n  /**\n   * Closes this {@link IConverter}.\n   *\n   * What happens when the {@link IConverter} closes depends entirely on which {@link IConverterCloseBehavior} is being\n   * used. The default behaviour is `\"close\"` but this may have been changed via {@link IConverterOptions#closeBehavior}\n   * when this {@link IConverter} was created.\n   *\n   * Regardless of the behavior above, any temporary files that may have been created by this {@link IConverter} that\n   * have not yet been deleted will be deleted now.\n   *\n   * Once closed, this {@link IConverter} should be discarded and a new one created, as and when needed.\n   *\n   * An error will occur if any problem arises while performing the closing behavior, where applicable.\n   */\n  close(): Promise<void>;\n\n  /**\n   * Converts the specified `input` SVG into another format using the `options` provided.\n   *\n   * `input` can either be an SVG buffer or string.\n   *\n   * If the width and/or height cannot be derived from `input`; then they must be provided via their corresponding\n   * options. This method attempts to derive the dimensions from `input` via any `width`/`height` attributes or its\n   * calculated `viewBox` attribute.\n   *\n   * Only standard SVG element attributes (excl. event attributes) are allowed, and others are stripped from the SVG\n   * before being converted. This includes deprecated attributes unless the `allowDeprecatedAttributes` option is\n   * disabled. This is primarily for security purposes to ensure that malicious code cannot be injected.\n   *\n   * This method is resolved with the converted output buffer.\n   *\n   * An error will occur if this {@link IConverter} has been closed, both the `baseFile` and `baseUrl` options have been\n   * provided, `input` does not contain an SVG element, or no `width` and/or `height` options were provided and this\n   * information could not be derived from `input`.\n   *\n   * @param input The SVG input to be converted to another format.\n   * @param options The options to be used.\n   * @return The converted output buffer.\n   */\n  convert(input: Buffer | string, options?: ConvertOptions): Promise<Buffer>;\n\n  /**\n   * Converts the SVG file at the specified path into another format using the `options` provided and writes it to the\n   * output file.\n   *\n   * The output file is derived from `inputFilePath` unless the `outputFilePath` option is specified.\n   *\n   * If the width and/or height cannot be derived from the input file, then they must be provided via their\n   * corresponding options. This method attempts to derive the dimensions from the input file via any `width`/`height`\n   * attributes or its calculated `viewBox` attribute.\n   *\n   * Only standard SVG element attributes (excl. event attributes) are allowed, and others are stripped from the SVG\n   * before being converted. This includes deprecated attributes unless the `allowDeprecatedAttributes` option is\n   * disabled. This is primarily for security purposes to ensure that malicious code cannot be injected.\n   *\n   * This method is resolved with the path of the converted output file for reference.\n   *\n   * An error will occur if this {@link IConverter} has been closed, both the `baseFile` and `baseUrl` options have been\n   * provided, the input file does not contain an SVG element, no `width` and/or `height` options were provided and this\n   * information could not be derived from an input file, or a problem arises while reading the input file or writing\n   * the output file.\n   *\n   * @param inputFilePath The path of the SVG file to be converted to another file format.\n   * @param options The options to be used.\n   * @return The output file path.\n   */\n  convertFile(\n    inputFilePath: string,\n    options?: IConverterConvertFileOptions<ConvertOptions>,\n  ): Promise<string>;\n}\n\n/**\n * The options that can be used to construct an implementation of {@link IConverter}.\n */\nexport interface IConverterOptions<\n  ConvertOptions extends IConverterConvertOptions,\n  ConvertOptionsParsed extends IConverterConvertOptionsParsed,\n> {\n  /**\n   * An existing {@link Browser} instance provided by `puppeteer-core` that is used to create a {@link BrowserContext}\n   * to open each new {@link Page} to capture a screenshot of an SVG to convert it into another format. If specified,\n   * {@link #launch} will be ignored.\n   *\n   * For context; each {@link IConverter} instance uses their own {@link BrowserContext} to open each new {@link Page}.\n   * This ensures that the pages are isolated and that they can be closed by the {@link IConverter} accordingly. A\n   * {@linl Page} is opened for each invocation of {@link IConverter#convert} and {@link IConverter#convertFile} and\n   * closed once finished. If the {@link IConverter} is closed (e.g. via {@link IConverter#close}), any pages currently\n   * open due to ongoing invocations of those methods will be closed immediately and will likely result in them\n   * rejecting.\n   */\n  browser?: Browser;\n  /**\n   * The behavior when the {@link IConverter} is closed (e.g. via {@link IConverter#close}), which may be one of the\n   * following:\n   *\n   * - `\"close\"` - Calls {@link Browser#close}, effectively closing the browser and therefore all open pages, even those\n   *   not opened by the {@link IConverter} in the scenario that a shared browser instance or connection is being used.\n   *   This is the default behavior as it typically makes most sense for those wanting to just let the `convert-svg-*`\n   *   package to manage the browser resources.\n   * - `\"disconnect\"` - Calls {@link BrowserContext#close} and {@link Browser#disconnect}, effectively closing any pages\n   *   opened by the {@link IConverter} and disconnecting from the browser, keeping the browser process running and any\n   *   other pages created outside the {@link IConverter} open.\n   * - `\"none\"` - Calls {@link BrowserContext#close}, effectively closing any pages opened by the {@link IConverter} but\n   *   not doing anything with the browser. This could potentially result in a browser instance running that cannot be\n   *   accessed to close depending on what was responsible for creating or connecting to the browser.\n   *\n   * Care should be taken when specifying this option that the consequences are fully understood as well as the shift in\n   * the responsibilities to the caller to ensure that resources are managed accordingly.\n   *\n   * @defaultValue \"close\"\n   */\n  closeBehavior?: IConverterCloseBehavior;\n  /**\n   * The options that are to be passed directly to `puppeteer-core` when launching a new {@link Browser} that is used to\n   * create a {@link BrowserContext} to open each new {@link Page} to capture a screenshot of an SVG to convert it into\n   * another format. Ignored if {@link #browser} is also specified.\n   *\n   * For context; each {@link IConverter} instance uses their own {@link BrowserContext} to open each new {@link Page}.\n   * This ensures that the pages are isolated and that they can be closed by the {@link IConverter} accordingly. A\n   * {@linl Page} is opened for each invocation of {@link IConverter#convert} and {@link IConverter#convertFile} and\n   * closed once finished. If the {@link IConverter} is closed (e.g. via {@link IConverter#close}), any pages currently\n   * open due to ongoing invocations of those methods will be closed immediately and will likely result in them\n   * rejecting.\n   */\n  launch?: IConverterLaunchOptions;\n  /**\n   * The options that are to be passed directly to `puppeteer-core` when populating a {@link Page} with the SVG\n   * contents.\n   *\n   * For context; each {@link IConverter} instance uses their own {@link BrowserContext} to open each new {@link Page}.\n   * This ensures that the pages are isolated and that they can be closed by the {@link IConverter} accordingly. A\n   * {@linl Page} is opened for each invocation of {@link IConverter#convert} and {@link IConverter#convertFile} and\n   * closed once finished. If the {@link IConverter} is closed (e.g. via {@link IConverter#close}), any pages currently\n   * open due to ongoing invocations of those methods will be closed immediately and will likely result in them\n   * rejecting.\n   */\n  page?: WaitForOptions;\n  /**\n   * The {@link IProvider} to be used.\n   */\n  provider: IProvider<ConvertOptions, ConvertOptionsParsed>;\n}\n\n/**\n * The behavior when a {@link IConverter} is closed (e.g. via {@link IConverter#close}), which may be one of the\n * following:\n *\n * - `\"close\"` - Calls {@link Browser#close}, effectively closing the browser and therefore all open pages, even those\n *   not opened by the {@link IConverter} in the scenario that a shared browser instance or connection is being used.\n * - `\"disconnect\"` - Calls {@link BrowserContext#close} and {@link Browser#disconnect}, effectively closing any pages\n *   opened by the {@link IConverter} and disconnecting from the browser, keeping the browser process running and any\n *   other pages created outside the {@link IConverter} open.\n * - `\"none\"` - Calls {@link BrowserContext#close}, effectively closing any pages opened by the {@link IConverter} but\n *   not doing anything with the browser. This could potentially result in a browser instance running that cannot be\n *   accessed to close depending on what was responsible for creating or connecting to the browser.\n */\nexport type IConverterCloseBehavior = \"close\" | \"disconnect\" | \"none\";\n\n/**\n * The options that can be passed to {@link IConverter#convert}.\n */\nexport interface IConverterConvertOptions {\n  /**\n   * Whether deprecated SVG element attributes should be retained in the SVG during conversion.\n   *\n   * @defaultValue true\n   */\n  allowDeprecatedAttributes?: boolean;\n  /**\n   * The background color to be used to fill transparent regions within the SVG. If omitted, the {@link IProvider} will\n   * determine the default background color.\n   */\n  background?: string;\n  /**\n   * The path of the file to be converted into a file URL to use for all relative URLs contained within the SVG. Cannot\n   * be used in conjunction with {@link #baseUrl}.\n   */\n  baseFile?: string;\n  /**\n   * The base URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with\n   * {@link #baseFile}.\n   */\n  baseUrl?: string;\n  /**\n   * The height of the output to be generated. If omitted, an attempt will be made to derive the height from the SVG\n   * input.\n   */\n  height?: number | string;\n  /**\n   * The type of rounding to be applied to the width and height, which may be one of the following:\n   *\n   * - `\"ceil\"` - Values are rounded using `Math.ceil`.\n   * - `\"floor\"` - Values are rounded using `Math.floor`.\n   * - `\"round\"` - Values are rounded using `Math.round`. The default rounding used, if omitted.\n   *\n   * @defaultValue \"round\"\n   */\n  rounding?: IConverterRounding;\n  /**\n   * The scale to be applied to the width and height (either specified as options or derived).\n   *\n   * @defaultValue 1\n   */\n  scale?: number;\n  /**\n   * The width of the output to be generated. If omitted, an attempt will be made to derive the width from the SVG\n   * input.\n   */\n  width?: number | string;\n}\n\n/**\n * The options that can be passed to {@link IConverter#convert} after being parsed.\n */\nexport interface IConverterConvertOptionsParsed {\n  /**\n   * Whether deprecated SVG element attributes should be retained in the SVG during conversion.\n   */\n  allowDeprecatedAttributes: boolean;\n  /**\n   * The background color to be used to fill transparent regions within the SVG. If omitted, the {@link IProvider} will\n   * determine the default background color.\n   */\n  background?: string;\n  /**\n   * The base URL to use for all relative URLs contained within the SVG.\n   */\n  baseUrl: string;\n  /**\n   * The height of the output to be generated. If omitted, an attempt will be made to derive the height from the SVG\n   * input.\n   */\n  height?: number;\n  /**\n   * The type of rounding to be applied to the width and height, which may be one of the following:\n   *\n   * - `\"ceil\"` - Values are rounded using `Math.ceil`.\n   * - `\"floor\"` - Values are rounded using `Math.floor`.\n   * - `\"round\"` - Values are rounded using `Math.round`.\n   */\n  rounding: IConverterRounding;\n  /**\n   * The scale to be applied to the width and height (either specified as options or derived).\n   */\n  scale: number;\n  /**\n   * The width of the output to be generated. If omitted, an attempt will be made to derive the width from the SVG\n   * input.\n   */\n  width?: number;\n}\n\n/**\n * The options that can be passed to {@link IConverter#convertFile}.\n */\nexport type IConverterConvertFileOptions<\n  ConvertOptions extends IConverterConvertOptions,\n> = ConvertOptions & {\n  /**\n   * The path of the file to which the output should be written to. By default, this will be derived from the input file\n   * path.\n   */\n  outputFilePath?: string;\n};\n\n/**\n * The options that can be passed to {@link IConverter#convertFile} after being parsed.\n */\nexport type IConverterConvertFileOptionsParsed<\n  ConvertOptionsParsed extends IConverterConvertOptionsParsed,\n> = ConvertOptionsParsed & {\n  /**\n   * The path of the file to which the output should be written to.\n   */\n  outputFilePath: string;\n};\n\n/**\n * TODO: Document\n */\nexport type IConverterLaunchOptions = Omit<LaunchOptions, \"executablePath\"> & {\n  /**\n   * TODO: Document\n   *\n   * @param options\n   * @return\n   */\n  executablePath?: string | ((options: LaunchOptions) => string);\n};\n\n// TODO: Ensure all other places where `LaunchOptions` is referenced are updated to `IConverterLaunchOptions`\n// TODO: Ensure IConverterLaunchOptions is exported by all convert-svg-to-* packages\n\n/**\n * The type of rounding to be applied to the width and height during a conversion, which may be one of the following:\n *\n * - `\"ceil\"` - Values are rounded using `Math.ceil`.\n * - `\"floor\"` - Values are rounded using `Math.floor`.\n * - `\"round\"` - Values are rounded using `Math.round`.\n */\nexport type IConverterRounding = \"ceil\" | \"floor\" | \"round\";\n\n/**\n * An implementation of {@link IConverter}.\n */\nexport class Converter<\n  ConvertOptions extends IConverterConvertOptions,\n  ConvertOptionsParsed extends IConverterConvertOptionsParsed,\n> implements IConverter<ConvertOptions, ConvertOptionsParsed>\n{\n  static readonly #allowedAttributeNames = new Set<string>([\n    // Core\n    \"height\",\n    \"preserveAspectRatio\",\n    \"viewBox\",\n    \"width\",\n    \"x\",\n    \"xmlns\",\n    \"y\",\n    // Conditional Processing\n    \"requiredExtensions\",\n    \"systemLanguage\",\n    // Presentation\n    \"clip-path\",\n    \"clip-rule\",\n    \"color\",\n    \"color-interpolation\",\n    \"cursor\",\n    \"display\",\n    \"fill\",\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"filter\",\n    \"mask\",\n    \"opacity\",\n    \"overflow\",\n    \"pointer-events\",\n    \"shape-rendering\",\n    \"stroke\",\n    \"stroke-dasharray\",\n    \"stroke-dashoffset\",\n    \"stroke-linecap\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"style\",\n    \"transform\",\n    \"vector-effect\",\n    \"visibility\",\n    // XML\n    \"xml:lang\",\n    \"xmlns\",\n    \"xmlns:xlink\",\n  ]);\n  static readonly #allowedDeprecatedAttributeNames = new Set<string>([\n    // Core\n    \"baseProfile\",\n    \"version\",\n    \"zoomAndPan\",\n    // Conditional Processing\n    \"requiredFeatures\",\n    // Presentation\n    \"clip\",\n    \"color-rendering\",\n    \"enable-background\",\n    // XML\n    \"xml:base\",\n    \"xml:space\",\n  ]);\n\n  /**\n   * Creates an instance of {@link Converter} using the `options` provided.\n   *\n   * A {@link BrowserContext} is created from the either {@link IConverterOptions#browser}, if specified, or a new\n   * {@link Browser} instance launched using {@link IConverterOptions#launch}.\n   *\n   * An error will occur if neither of the above options is specified.\n   *\n   * @param options The options to be used.\n   * @return A newly created {@link Converter} instance.\n   */\n  static async create<\n    ConvertOptions extends IConverterConvertOptions,\n    ConvertOptionsParsed extends IConverterConvertOptionsParsed,\n  >(\n    options: IConverterOptions<ConvertOptions, ConvertOptionsParsed>,\n  ): Promise<Converter<ConvertOptions, ConvertOptionsParsed>> {\n    const {\n      browser: browserOption,\n      launch: launchOptions,\n      ...converterOptions\n    } = options;\n    const browser =\n      browserOption ??\n      (await launchBrowser(\n        Converter.#handleExecutablePath({\n          ...Converter.parseEnvLaunchOptions(),\n          ...launchOptions,\n        }),\n      ));\n    const browserContext = await browser.createBrowserContext();\n\n    return new Converter<ConvertOptions, ConvertOptionsParsed>({\n      browser,\n      browserContext,\n      ...converterOptions,\n    });\n  }\n\n  /**\n   * TODO: Document\n   *\n   * @return\n   */\n  static parseEnvLaunchOptions(): IConverterLaunchOptions | undefined {\n    // TODO: Add zod validation?\n    const rawEnvOptions = process.env.CONVERT_SVG_LAUNCH_OPTIONS;\n    return rawEnvOptions\n      ? (JSON.parse(rawEnvOptions) as IConverterLaunchOptions)\n      : undefined;\n  }\n\n  static #handleExecutablePath(\n    options: IConverterLaunchOptions,\n  ): LaunchOptions {\n    const { executablePath, ...launchOptions } = options;\n\n    switch (typeof executablePath) {\n      case \"string\":\n        return { ...launchOptions, executablePath };\n      case \"function\":\n        return {\n          ...launchOptions,\n          executablePath: executablePath(launchOptions),\n        };\n      default:\n        return launchOptions;\n    }\n  }\n\n  static #isAttributeAllowed(\n    attributeName: string,\n    options: IConverterConvertOptions,\n  ): boolean {\n    return (\n      Converter.#allowedAttributeNames.has(attributeName) ||\n      (!!options.allowDeprecatedAttributes &&\n        Converter.#allowedDeprecatedAttributeNames.has(attributeName))\n    );\n  }\n\n  static #isValidRounding(\n    value: string | undefined,\n  ): value is IConverterRounding {\n    return (\n      typeof value === \"string\" && [\"ceil\", \"floor\", \"round\"].includes(value)\n    );\n  }\n\n  static #parseBaseUrlOptions(\n    baseFile: string | undefined,\n    baseUrl: string | undefined,\n    defaultBaseUrlSupplier: () => string,\n  ): string {\n    if (baseFile != null && baseUrl != null) {\n      throw new Error(\n        \"Both baseFile and baseUrl options specified. Use only one\",\n      );\n    }\n\n    const value = typeof baseFile === \"string\" ? fileUrl(baseFile) : baseUrl;\n    return value || fileUrl(defaultBaseUrlSupplier());\n  }\n\n  static #parseBooleanOption(\n    value: boolean | undefined,\n    defaultValue: boolean,\n  ): boolean {\n    return typeof value === \"boolean\" ? value : defaultValue;\n  }\n\n  static #parseNumericOption(\n    value: number | string | undefined,\n  ): number | undefined;\n  static #parseNumericOption(\n    value: number | string | undefined,\n    defaultValue: number,\n  ): number;\n  static #parseNumericOption(\n    value: number | string | undefined,\n    defaultValue?: number,\n  ): number | undefined {\n    if (typeof value === \"string\") {\n      return parseInt(value, 10);\n    }\n    return typeof value === \"number\" ? value : defaultValue;\n  }\n\n  static #parseRoundingOption(\n    value: string | undefined,\n    defaultValue: IConverterRounding,\n  ): IConverterRounding {\n    if (Converter.#isValidRounding(value)) {\n      return value;\n    }\n    return defaultValue;\n  }\n\n  static #roundDimension(\n    dimension: number,\n    rounding: IConverterRounding,\n  ): number {\n    switch (rounding) {\n      case \"ceil\":\n        return Math.ceil(dimension);\n      case \"floor\":\n        return Math.floor(dimension);\n      case \"round\":\n        return Math.round(dimension);\n      default:\n        throw new Error(`Unexpected IConverterRounding: \"${rounding}\"`);\n    }\n  }\n\n  static #roundDimensions(\n    dimensions: IDimensions,\n    rounding: IConverterRounding,\n  ): IDimensions {\n    return {\n      height: Converter.#roundDimension(dimensions.height, rounding),\n      width: Converter.#roundDimension(dimensions.width, rounding),\n    };\n  }\n\n  static async #setDimensions(\n    { page }: IContext,\n    dimensions: Partial<IDimensions>,\n  ): Promise<void> {\n    if (\n      typeof dimensions.width !== \"number\" &&\n      typeof dimensions.height !== \"number\"\n    ) {\n      return;\n    }\n\n    await page.evaluate(({ width, height }) => {\n      const el = document.querySelector(\"svg\");\n      if (!el) {\n        return;\n      }\n\n      if (typeof width === \"number\") {\n        el.setAttribute(\"width\", `${width}px`);\n      } else {\n        el.removeAttribute(\"width\");\n      }\n\n      if (typeof height === \"number\") {\n        el.setAttribute(\"height\", `${height}px`);\n      } else {\n        el.removeAttribute(\"height\");\n      }\n    }, dimensions);\n  }\n\n  readonly #browser: Browser;\n  readonly #browserContext: BrowserContext;\n  readonly #closeBehavior: IConverterCloseBehavior;\n  #closed: boolean;\n  readonly #pageOptions: WaitForOptions;\n  readonly #provider: IProvider<ConvertOptions, ConvertOptionsParsed>;\n  #tempFiles: Record<string, ITempFile> = {};\n\n  private constructor(\n    options: ConverterOptions<ConvertOptions, ConvertOptionsParsed>,\n  ) {\n    this.#browser = options.browser;\n    this.#browserContext = options.browserContext;\n    this.#closed = !options.browser.connected;\n    this.#closeBehavior = options.closeBehavior || \"close\";\n    this.#pageOptions = { ...options.page };\n    this.#provider = options.provider;\n  }\n\n  async convert(\n    input: Buffer | string,\n    options?: ConvertOptions,\n  ): Promise<Buffer> {\n    this.#validate();\n\n    const parsedOptions = this.#parseConvertOptions(options, process.cwd);\n\n    return await this.#convert(input, parsedOptions);\n  }\n\n  async convertFile(\n    inputFilePath: string,\n    options?: IConverterConvertFileOptions<ConvertOptions>,\n  ): Promise<string> {\n    this.#validate();\n\n    const parsedOptions = this.#parseConvertFileOptions(inputFilePath, options);\n\n    const input = await readFile(inputFilePath);\n    const output = await this.#convert(input, parsedOptions);\n\n    await writeFile(parsedOptions.outputFilePath, output);\n\n    return parsedOptions.outputFilePath;\n  }\n\n  async close(): Promise<void> {\n    if (this.#closed) {\n      return;\n    }\n\n    this.#closed = true;\n\n    switch (this.#closeBehavior) {\n      case \"close\":\n        await this.#browser.close();\n        break;\n      case \"disconnect\":\n        await this.#browserContext.close();\n        await this.#browser.disconnect();\n        break;\n      case \"none\":\n        await this.#browserContext.close();\n        break;\n      default:\n        throw new Error(\n          `Unexpected IConverterCloseBehavior: \"${this.#closeBehavior}\"`,\n        );\n    }\n\n    Object.values(this.#tempFiles).forEach((tempFile) => tempFile.cleanup());\n    this.#tempFiles = {};\n  }\n\n  async #closeContext(context: IContext): Promise<void> {\n    context.tempFile.cleanup();\n    delete this.#tempFiles[context.tempFile.path];\n\n    await context.page.close();\n  }\n\n  async #convert(\n    input: Buffer | string,\n    options: ConvertOptionsParsed,\n  ): Promise<Buffer> {\n    input = Buffer.isBuffer(input) ? input.toString(\"utf8\") : input;\n\n    const provider = this.#provider;\n    const $ = loadHtml(input, null, false);\n    const $svg = $(\"svg:first\");\n\n    this.#sanitize($svg, options);\n    $svg.find(\"svg\").each((_i, svg) => {\n      this.#sanitize($(svg), options);\n    });\n\n    const svg = $svg.prop(\"outerHTML\") as unknown as string;\n    if (!svg) {\n      throw new Error(\"SVG element not found in input. Check the SVG input\");\n    }\n\n    const html = `<!DOCTYPE html>\n<html>\n<head>\n<base href=\"${options.baseUrl}\">\n<meta charset=\"utf-8\">\n<style>\n* { margin: 0; padding: 0; }\nhtml { background-color: ${provider.getBackgroundColor(options)}; }\n</style>\n</head>\n<body>${svg}</body>\n</html>`;\n\n    const context = await this.#createContext(html);\n\n    try {\n      await Converter.#setDimensions(context, options);\n\n      let dimensions = await this.#getDimensions(context, options);\n\n      if (options.scale !== 1) {\n        dimensions = Converter.#roundDimensions(\n          {\n            height: dimensions.height * options.scale,\n            width: dimensions.width * options.scale,\n          },\n          options.rounding,\n        );\n\n        await Converter.#setDimensions(context, dimensions);\n      }\n\n      await context.page.setViewport(dimensions);\n\n      return Buffer.from(\n        await context.page.screenshot({\n          clip: { x: 0, y: 0, ...dimensions },\n          ...provider.getScreenshotOptions(options),\n          type: provider.format,\n        }),\n      );\n    } finally {\n      await this.#closeContext(context);\n    }\n  }\n\n  async #createContext(html: string): Promise<IContext> {\n    const [page, tempFile] = await Promise.all([\n      this.#browserContext.newPage(),\n      this.#createTempFile(),\n    ]);\n\n    await writeFile(tempFile.path, html);\n    await page.goto(fileUrl(tempFile.path), this.#pageOptions);\n\n    return { page, tempFile };\n  }\n\n  #createTempFile(): Promise<ITempFile> {\n    return new Promise((resolve, reject) =>\n      tmpFile(\n        { prefix: \"convert-svg-\", postfix: \".html\" },\n        (error, filePath, _fd, cleanup) => {\n          if (error) {\n            reject(error);\n          } else {\n            const tempFile = { path: filePath, cleanup };\n            this.#tempFiles[filePath] = tempFile;\n\n            resolve(tempFile);\n          }\n        },\n      ),\n    );\n  }\n\n  async #getDimensions(\n    { page }: IContext,\n    options: ConvertOptionsParsed,\n  ): Promise<IDimensions> {\n    const dimensions = await page.evaluate(() => {\n      const el = document.querySelector(\"svg\");\n      if (!el) {\n        return null;\n      }\n\n      const parseAttributeDimension = (\n        attributeName: string,\n      ): number | null => {\n        const attributeValue = el.getAttribute(attributeName);\n        if (!attributeValue || attributeValue.endsWith(\"%\")) {\n          return null;\n        }\n\n        const dimension = parseFloat(attributeValue);\n        if (Number.isNaN(dimension)) {\n          return null;\n        }\n\n        if (attributeValue.endsWith(\"pt\")) {\n          return dimension * 1.33333;\n        }\n\n        return dimension;\n      };\n\n      const width = parseAttributeDimension(\"width\");\n      const height = parseAttributeDimension(\"height\");\n\n      if (width && height) {\n        return { width, height };\n      }\n\n      const viewBoxWidth = el.viewBox.animVal.width;\n      const viewBoxHeight = el.viewBox.animVal.height;\n\n      if (width && viewBoxHeight) {\n        return {\n          width,\n          height: (width * viewBoxHeight) / viewBoxWidth,\n        };\n      }\n\n      if (height && viewBoxWidth) {\n        return {\n          width: (height * viewBoxWidth) / viewBoxHeight,\n          height,\n        };\n      }\n\n      return null;\n    });\n    if (!dimensions) {\n      throw new Error(\n        \"Unable to derive width and height from SVG. Consider specifying corresponding options\",\n      );\n    }\n\n    return Converter.#roundDimensions(dimensions, options.rounding);\n  }\n\n  #parseConvertFileOptions(\n    inputFilePath: string,\n    options: IConverterConvertFileOptions<ConvertOptions> | undefined,\n  ): IConverterConvertFileOptionsParsed<ConvertOptionsParsed> {\n    const parsedOptions = this.#parseConvertOptions(options, () =>\n      inputFilePath ? resolve(inputFilePath) : process.cwd(),\n    );\n\n    let outputFilePath = options?.outputFilePath;\n    if (!outputFilePath) {\n      const extension = `.${this.#provider.extension}`;\n      const outputDirPath = dirname(inputFilePath);\n      const outputFileName = `${basename(inputFilePath, extname(inputFilePath))}${extension}`;\n\n      outputFilePath = join(outputDirPath, outputFileName);\n    }\n\n    return {\n      ...parsedOptions,\n      outputFilePath,\n    };\n  }\n\n  #parseConvertOptions(\n    options: ConvertOptions | undefined,\n    defaultBaseUrlSupplier: () => string,\n  ): ConvertOptionsParsed {\n    return this.#provider.parseConverterOptions(options, {\n      allowDeprecatedAttributes: Converter.#parseBooleanOption(\n        options?.allowDeprecatedAttributes,\n        true,\n      ),\n      background: options?.background,\n      baseUrl: Converter.#parseBaseUrlOptions(\n        options?.baseFile,\n        options?.baseUrl,\n        defaultBaseUrlSupplier,\n      ),\n      height: Converter.#parseNumericOption(options?.height),\n      rounding: Converter.#parseRoundingOption(options?.rounding, \"round\"),\n      scale: Converter.#parseNumericOption(options?.scale, 1),\n      width: Converter.#parseNumericOption(options?.width),\n    });\n  }\n\n  #sanitize($svg: Cheerio<Element>, options: ConvertOptionsParsed): void {\n    const attributeNames = Object.keys($svg.attr() || {});\n\n    for (const attributeName of attributeNames) {\n      if (!Converter.#isAttributeAllowed(attributeName, options)) {\n        $svg.removeAttr(attributeName);\n      }\n    }\n  }\n\n  #validate(): void {\n    if (this.#closed) {\n      throw new Error(\n        \"Converter has been closed. A new Converter must be created\",\n      );\n    }\n    if (!this.#browser.connected) {\n      throw new Error(\n        \"Converter has lost connection to the browser. A new Converter must be created\",\n      );\n    }\n  }\n\n  get closed(): boolean {\n    return this.#closed;\n  }\n\n  get provider(): IProvider<ConvertOptions, ConvertOptionsParsed> {\n    return this.#provider;\n  }\n}\n\ntype ConverterOptions<\n  ConvertOptions extends IConverterConvertOptions,\n  ConvertOptionsParsed extends IConverterConvertOptionsParsed,\n> = Omit<\n  IConverterOptions<ConvertOptions, ConvertOptionsParsed>,\n  \"browser\" | \"launch\"\n> & {\n  browser: Browser;\n  browserContext: BrowserContext;\n  provider: IProvider<ConvertOptions, ConvertOptionsParsed>;\n};\n\ninterface IContext {\n  page: Page;\n  tempFile: ITempFile;\n}\n\ninterface IDimensions {\n  height: number;\n  width: number;\n}\n\ninterface ITempFile {\n  path: string;\n\n  cleanup(): void;\n}\n"]}