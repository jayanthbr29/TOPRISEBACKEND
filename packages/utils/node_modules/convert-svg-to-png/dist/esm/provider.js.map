{"version":3,"file":"provider.js","sourceRoot":"","sources":["../../src/provider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;AASH;;GAEG;AACH,MAAM,OAAO,WAAW;IAGtB,kBAAkB,CAAC,OAAuC;QACxD,OAAO,OAAO,CAAC,UAAU,IAAI,aAAa,CAAC;IAC7C,CAAC;IAED,oBAAoB,CAClB,OAAuC;QAEvC,OAAO,EAAE,cAAc,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;IACjD,CAAC;IAED,qBAAqB,CACnB,QAA8C,EAC9C,aAA6C;QAE7C,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,IAAI,SAAS;QACX,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,MAAM;QACR,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["/*\n * Copyright (C) 2025 neocotic\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport type {\n  IConverterConvertOptions,\n  IConverterConvertOptionsParsed,\n  IProvider,\n} from \"convert-svg-core\";\nimport type { ImageFormat, ScreenshotOptions } from \"puppeteer-core\";\n\n/**\n * An {@link IProvider} implementation to support PNG as an output format for SVG conversion.\n */\nexport class PngProvider\n  implements IProvider<IConverterConvertOptions, IConverterConvertOptionsParsed>\n{\n  getBackgroundColor(options: IConverterConvertOptionsParsed): string {\n    return options.background || \"transparent\";\n  }\n\n  getScreenshotOptions(\n    options: IConverterConvertOptionsParsed,\n  ): ScreenshotOptions {\n    return { omitBackground: !options.background };\n  }\n\n  parseConverterOptions(\n    _options: IConverterConvertOptions | undefined,\n    parsedOptions: IConverterConvertOptionsParsed,\n  ): IConverterConvertOptionsParsed {\n    return parsedOptions;\n  }\n\n  get extension(): string {\n    return \"png\";\n  }\n\n  get format(): ImageFormat {\n    return \"png\";\n  }\n}\n"]}